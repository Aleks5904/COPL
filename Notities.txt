⟨expr⟩ -> ⟨var⟩ 
⟨expr⟩ -> '(' ⟨expr⟩ ')'
⟨expr⟩ -> '\' ⟨var⟩ ⟨expr⟩
⟨expr⟩ -> ⟨expr⟩ ⟨expr⟩

expressie is de start instantie. Var is het einde.
Variabelen beginnen altijd met een letter. Kan meerdere tekens lang zijn. Variabelen zijn alfa numerisch

1ste regel variabele:
    een expressie kan een variabele worden.

2de regel haakjes:
    We maken een teller ( +1, )-1 wanneer teller 0. Check expressie binnen haken
    Kijk of er 1 expressie tussen haken zit. geen expressie tussen haken -> error
    Wanneer teller 0 bijbehorende haak gevonden. Ga naar expressie check
    teller < 0 -> error too many closing.
    teller eind > 0 -> error too many opening.

3de regel Variabelen:
    Als we een \ zien moet de volgende waarde een variabele zijn.
    geen variabele -> error
    Daarna moet er nog een expressie zijn. dus roep expressie check aan.


func expressie check(){
    if ( zoek bijbehorende )
        snij haakjes weg voor nieuwe expressie
        fun.
}

START 	EIND	expressie		Actie
                                expressiecheck
0		13		(\x((a) (b)))	lees (
0		13						bracketcheck(0,13). Vind ) op 13
								expressiecheck(1,12)
1		12		 \x((a) (b))		lees \	
								SlashCheck(1,12)
2		12						varcheck(2,12) true
3		12						expressiecheck(3,12)
				   ((a) (b))	lees (
3		12						bracketcheck(3,12). vind ) op 11
4		11						expressiecheck(4,11)
					 (a) (b)
4		11			 			lees (
4		6						bracketcheck(4,6)
5		5						expressiecheck(5,5)
5		5			  a			lees a
5		5			  			variabele check true
								bracketcheck(4,6) true Regel 43
								start wordt locatie sluit haak + 1
7		11						
								lees ' '

\ x (x)
x(x)
c(x)
c(c)